package fp

// This file is automatically generated, manual editing is not recommended.

import (
	"encoding/json"
	"fmt"
	"time"

	"fyne.io/fyne/v2/data/binding"
	"github.com/lukx33/lwhelper"
	"github.com/lukx33/lwhelper/out"
)

var tmpKube = lwhelper.ID()

type Kube interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	ID() string
	Created() int64
	Updated() int64

	Config() string
	SetConfig(value string) out.Info
	Enabled() bool
	SetEnabled(value bool) out.Info
	Name() string
	SetName(value string) out.Info
	Organization() Organization
	SetOrganization(value Organization) out.Info
	Delete() out.Info
}
type kubeS struct {
	out.DontUseMeInfoS

	IDC      string
	CreatedC int64
	UpdatedC int64

	ConfigC       string
	EnabledC      bool
	NameC         string
	OrganizationC string
}

func (o *kubeS) dataMapEN() map[string]string {
	return map[string]string{
		"ID":           o.IDC,
		"Created":      fmt.Sprint(o.CreatedC),
		"Updated":      fmt.Sprint(o.UpdatedC),
		"Config":       o.ConfigC,
		"Enabled":      fmt.Sprint(o.EnabledC),
		"Name":         o.NameC,
		"Organization": o.OrganizationC,
	}
}

// ---

func (o *kubeS) AddListener(l binding.DataListener) {
	fmt.Println("Kube AddListener")
}

func (o *kubeS) RemoveListener(l binding.DataListener) {
	fmt.Println("Kube RemoveListener")
}

// ---

func (o *kubeS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *kubeS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

// ---
// ID

func (o *kubeS) ID() string {
	if o == nil {
		return ""
	}
	return o.IDC
}

// ---
// Created

func (o *kubeS) Created() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedC
}

// ---
// Updated

func (o *kubeS) Updated() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedC
}

// ---
// Config

func (o *kubeS) Config() string {
	return o.ConfigC
}

func (o *kubeS) SetConfig(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"KubeSetConfig",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.ConfigC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Enabled

func (o *kubeS) Enabled() bool {
	return o.EnabledC
}

func (o *kubeS) SetEnabled(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"KubeSetEnabled",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.EnabledC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Name

func (o *kubeS) Name() string {
	return o.NameC
}

func (o *kubeS) SetName(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"KubeSetName",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.NameC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Organization

func (o *kubeS) Organization() Organization {
	return OrganizationGetByID(o.OrganizationC)
}

func (o *kubeS) SetOrganization(value Organization) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"KubeSetOrganization",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.OrganizationC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---

func KubeGetByID(ID string) Kube {

	response := &kubeS{}
	client.call(
		"KubeGetByID",
		req_oneS{
			ID: ID,
		},
		response,
	)

	return response
}

// ---

func (o *kubeS) Delete() out.Info {

	response := new(out.DontUseMeInfoS)
	client.call(
		"KubeDelete",
		req_oneS{
			ID: o.ID(),
		},
		response,
	)

	return response
}

// ---

type req_KubeCreateS struct {
	Config       string
	Name         string
	Organization string
}

func KubeCreate(
	Config string,
	Name string,
	Organization Organization,

) Kube {

	response := &kubeS{}
	client.call(
		"KubeCreate",
		req_KubeCreateS{
			Config:       Config,
			Name:         Name,
			Organization: Organization.ID(),
		},
		response,
	)
	return response
}

// ----------------------------------------------------- table list:

type kubeList interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	Length() int
	First() Kube
	GetByID(id string) Kube
	Iter() []Kube
	Refresh() out.Info
	SetWhere(where string) out.Info
	SetOrder(order string) out.Info
	SetOffset(offset int) out.Info
	SetLimit(limit int) out.Info

	AddListener(dl binding.DataListener)
	RemoveListener(dl binding.DataListener)
	GetItem(index int) (binding.DataItem, error)
}

type kubeListS struct {
	out.DontUseMeInfoS

	query   req_listQueryS
	IDs     []string
	IDtoIdx map[string]int
	M       map[string]*kubeS

	dataListener map[binding.DataListener]bool
}

func (o *kubeListS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *kubeListS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

func (o *kubeListS) AddListener(dl binding.DataListener) {
	// fmt.Println("KubeList AddListener")
	if o.dataListener == nil {
		o.dataListener = map[binding.DataListener]bool{}
	}
	o.dataListener[dl] = true
}

func (o *kubeListS) RemoveListener(dl binding.DataListener) {
	// fmt.Println("KubeList RemoveListener")
	delete(o.dataListener, dl)
}

func (o *kubeListS) GetItem(index int) (binding.DataItem, error) {
	// fmt.Println("KubeList GetItem")
	return o.M[o.IDs[index]], nil
}

func (o *kubeListS) Length() int {
	// fmt.Println("KubeList Length")
	return len(o.IDs)
}

//---

func KubeList(where, order string, offset, limit int) kubeList {

	response := &kubeListS{
		query: req_listQueryS{
			Where:  where,
			Order:  order,
			Offset: offset,
			Limit:  limit,
		},
	}

	if where == "nil" {
		return response
	}

	response.Refresh()
	return response
}

func (o *kubeListS) SetWhere(where string) out.Info {
	o.query = req_listQueryS{
		Where: where,
	}
	return o.Refresh()
}

func (o *kubeListS) SetOrder(order string) out.Info {
	o.query = req_listQueryS{
		Order: order,
	}
	return o.Refresh()
}

func (o *kubeListS) SetOffset(offset int) out.Info {
	o.query = req_listQueryS{
		Offset: offset,
	}
	return o.Refresh()
}

func (o *kubeListS) SetLimit(limit int) out.Info {
	o.query = req_listQueryS{
		Limit: limit,
	}
	return o.Refresh()
}

func (o *kubeListS) First() Kube {
	for _, obj := range o.M {
		return out.CatchError(obj, nil)
	}

	res := &kubeS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}

func (o *kubeListS) Iter() []Kube {

	if o.NotValid() {
		return nil
	}

	res := []Kube{}
	for _, id := range o.IDs {
		res = append(res, out.CatchError(o.M[id], nil))
	}
	return res
}

func (o *kubeListS) Refresh() out.Info {

	if o.query.Where == "nil" {
		return o
	}

	response := &kubeListS{
		query:        o.query,
		IDs:          []string{},
		IDtoIdx:      map[string]int{},
		M:            map[string]*kubeS{},
		dataListener: o.dataListener,
	}

	client.call(
		"KubeList",
		o.query,
		response,
	)
	*o = *response

	for dl := range o.dataListener {
		// fmt.Println(">>>>>>>>>>>>>>>>>> dataListener", dl)
		dl.DataChanged()
	}
	return o
}

func (o *kubeListS) GetByID(id string) Kube {
	return out.CatchError(o.M[id], nil)
}

//---

func (o *kubeListS) GetByName(name string) Kube {

	for _, obj := range o.M {
		if obj.NameC == name {
			return out.CatchError(obj, nil)
		}
	}

	res := &kubeS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}
