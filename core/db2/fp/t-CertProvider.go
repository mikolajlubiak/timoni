package fp

// This file is automatically generated, manual editing is not recommended.

import (
	"encoding/json"
	"fmt"
	"time"

	"fyne.io/fyne/v2/data/binding"
	"github.com/lukx33/lwhelper"
	"github.com/lukx33/lwhelper/out"
)

var tmpCertProvider = lwhelper.ID()

type CertProvider interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	ID() string
	Created() int64
	Updated() int64

	Azure_ClientID() string
	SetAzure_ClientID(value string) out.Info
	Azure_ClientSecret() string
	SetAzure_ClientSecret(value string) out.Info
	Azure_PrivateZone() bool
	SetAzure_PrivateZone(value bool) out.Info
	Azure_ResourceGroup() string
	SetAzure_ResourceGroup(value string) out.Info
	Azure_SubscriptionID() string
	SetAzure_SubscriptionID(value string) out.Info
	Azure_TenantID() string
	SetAzure_TenantID(value string) out.Info
	Enabled() bool
	SetEnabled(value bool) out.Info
	LetsEncrypt_ClientPrivateKey() []byte
	SetLetsEncrypt_ClientPrivateKey(value []byte) out.Info
	LetsEncrypt_Email() string
	SetLetsEncrypt_Email(value string) out.Info
	LetsEncrypt_Key() string
	SetLetsEncrypt_Key(value string) out.Info
	LetsEncrypt_URL() string
	SetLetsEncrypt_URL(value string) out.Info
	Name() string
	SetName(value string) out.Info
	Organization() Organization
	SetOrganization(value Organization) out.Info
	Variant() CertProviderVariantT
	SetVariant(value CertProviderVariantT) out.Info
	Delete() out.Info
}
type certProviderS struct {
	out.DontUseMeInfoS

	IDC      string
	CreatedC int64
	UpdatedC int64

	Azure_ClientIDC               string
	Azure_ClientSecretC           string
	Azure_PrivateZoneC            bool
	Azure_ResourceGroupC          string
	Azure_SubscriptionIDC         string
	Azure_TenantIDC               string
	EnabledC                      bool
	LetsEncrypt_ClientPrivateKeyC []byte
	LetsEncrypt_EmailC            string
	LetsEncrypt_KeyC              string
	LetsEncrypt_URLC              string
	NameC                         string
	OrganizationC                 string
	VariantC                      CertProviderVariantT
}

func (o *certProviderS) dataMapEN() map[string]string {
	return map[string]string{
		"ID":                           o.IDC,
		"Created":                      fmt.Sprint(o.CreatedC),
		"Updated":                      fmt.Sprint(o.UpdatedC),
		"Azure_ClientID":               o.Azure_ClientIDC,
		"Azure_ClientSecret":           o.Azure_ClientSecretC,
		"Azure_PrivateZone":            fmt.Sprint(o.Azure_PrivateZoneC),
		"Azure_ResourceGroup":          o.Azure_ResourceGroupC,
		"Azure_SubscriptionID":         o.Azure_SubscriptionIDC,
		"Azure_TenantID":               o.Azure_TenantIDC,
		"Enabled":                      fmt.Sprint(o.EnabledC),
		"LetsEncrypt_ClientPrivateKey": fmt.Sprint(o.LetsEncrypt_ClientPrivateKeyC),
		"LetsEncrypt_Email":            o.LetsEncrypt_EmailC,
		"LetsEncrypt_Key":              o.LetsEncrypt_KeyC,
		"LetsEncrypt_URL":              o.LetsEncrypt_URLC,
		"Name":                         o.NameC,
		"Organization":                 o.OrganizationC,
		"Variant":                      o.VariantC.EN(),
	}
}

// ---

func (o *certProviderS) AddListener(l binding.DataListener) {
	fmt.Println("CertProvider AddListener")
}

func (o *certProviderS) RemoveListener(l binding.DataListener) {
	fmt.Println("CertProvider RemoveListener")
}

// ---

func (o *certProviderS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *certProviderS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

// ---
// ID

func (o *certProviderS) ID() string {
	if o == nil {
		return ""
	}
	return o.IDC
}

// ---
// Created

func (o *certProviderS) Created() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedC
}

// ---
// Updated

func (o *certProviderS) Updated() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedC
}

// ---
// Azure_ClientID

func (o *certProviderS) Azure_ClientID() string {
	return o.Azure_ClientIDC
}

func (o *certProviderS) SetAzure_ClientID(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetAzure_ClientID",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.Azure_ClientIDC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Azure_ClientSecret

func (o *certProviderS) Azure_ClientSecret() string {
	return o.Azure_ClientSecretC
}

func (o *certProviderS) SetAzure_ClientSecret(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetAzure_ClientSecret",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.Azure_ClientSecretC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Azure_PrivateZone

func (o *certProviderS) Azure_PrivateZone() bool {
	return o.Azure_PrivateZoneC
}

func (o *certProviderS) SetAzure_PrivateZone(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetAzure_PrivateZone",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.Azure_PrivateZoneC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Azure_ResourceGroup

func (o *certProviderS) Azure_ResourceGroup() string {
	return o.Azure_ResourceGroupC
}

func (o *certProviderS) SetAzure_ResourceGroup(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetAzure_ResourceGroup",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.Azure_ResourceGroupC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Azure_SubscriptionID

func (o *certProviderS) Azure_SubscriptionID() string {
	return o.Azure_SubscriptionIDC
}

func (o *certProviderS) SetAzure_SubscriptionID(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetAzure_SubscriptionID",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.Azure_SubscriptionIDC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Azure_TenantID

func (o *certProviderS) Azure_TenantID() string {
	return o.Azure_TenantIDC
}

func (o *certProviderS) SetAzure_TenantID(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetAzure_TenantID",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.Azure_TenantIDC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Enabled

func (o *certProviderS) Enabled() bool {
	return o.EnabledC
}

func (o *certProviderS) SetEnabled(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetEnabled",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.EnabledC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// LetsEncrypt_ClientPrivateKey

func (o *certProviderS) LetsEncrypt_ClientPrivateKey() []byte {
	return o.LetsEncrypt_ClientPrivateKeyC
}

func (o *certProviderS) SetLetsEncrypt_ClientPrivateKey(value []byte) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetLetsEncrypt_ClientPrivateKey",
		req_setBytesS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LetsEncrypt_ClientPrivateKeyC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// LetsEncrypt_Email

func (o *certProviderS) LetsEncrypt_Email() string {
	return o.LetsEncrypt_EmailC
}

func (o *certProviderS) SetLetsEncrypt_Email(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetLetsEncrypt_Email",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LetsEncrypt_EmailC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// LetsEncrypt_Key

func (o *certProviderS) LetsEncrypt_Key() string {
	return o.LetsEncrypt_KeyC
}

func (o *certProviderS) SetLetsEncrypt_Key(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetLetsEncrypt_Key",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LetsEncrypt_KeyC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// LetsEncrypt_URL

func (o *certProviderS) LetsEncrypt_URL() string {
	return o.LetsEncrypt_URLC
}

func (o *certProviderS) SetLetsEncrypt_URL(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetLetsEncrypt_URL",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LetsEncrypt_URLC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Name

func (o *certProviderS) Name() string {
	return o.NameC
}

func (o *certProviderS) SetName(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetName",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.NameC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Organization

func (o *certProviderS) Organization() Organization {
	return OrganizationGetByID(o.OrganizationC)
}

func (o *certProviderS) SetOrganization(value Organization) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetOrganization",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.OrganizationC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Variant

func (o *certProviderS) Variant() CertProviderVariantT {
	return o.VariantC
}

func (o *certProviderS) SetVariant(value CertProviderVariantT) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderSetVariant",
		req_setUInt16S{
			ID:       o.IDC,
			NewValue: uint16(value),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.VariantC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---

func CertProviderGetByID(ID string) CertProvider {

	response := &certProviderS{}
	client.call(
		"CertProviderGetByID",
		req_oneS{
			ID: ID,
		},
		response,
	)

	return response
}

// ---

func (o *certProviderS) Delete() out.Info {

	response := new(out.DontUseMeInfoS)
	client.call(
		"CertProviderDelete",
		req_oneS{
			ID: o.ID(),
		},
		response,
	)

	return response
}

// ---

type req_CertProviderCreateS struct {
	Name         string
	Organization string
	Variant      CertProviderVariantT
}

func CertProviderCreate(
	Name string,
	Organization Organization,
	Variant CertProviderVariantT,

) CertProvider {

	response := &certProviderS{}
	client.call(
		"CertProviderCreate",
		req_CertProviderCreateS{
			Name:         Name,
			Organization: Organization.ID(),
			Variant:      Variant,
		},
		response,
	)
	return response
}

// ----------------------------------------------------- table list:

type certProviderList interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	Length() int
	First() CertProvider
	GetByID(id string) CertProvider
	Iter() []CertProvider
	Refresh() out.Info
	SetWhere(where string) out.Info
	SetOrder(order string) out.Info
	SetOffset(offset int) out.Info
	SetLimit(limit int) out.Info

	AddListener(dl binding.DataListener)
	RemoveListener(dl binding.DataListener)
	GetItem(index int) (binding.DataItem, error)
}

type certProviderListS struct {
	out.DontUseMeInfoS

	query   req_listQueryS
	IDs     []string
	IDtoIdx map[string]int
	M       map[string]*certProviderS

	dataListener map[binding.DataListener]bool
}

func (o *certProviderListS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *certProviderListS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

func (o *certProviderListS) AddListener(dl binding.DataListener) {
	// fmt.Println("CertProviderList AddListener")
	if o.dataListener == nil {
		o.dataListener = map[binding.DataListener]bool{}
	}
	o.dataListener[dl] = true
}

func (o *certProviderListS) RemoveListener(dl binding.DataListener) {
	// fmt.Println("CertProviderList RemoveListener")
	delete(o.dataListener, dl)
}

func (o *certProviderListS) GetItem(index int) (binding.DataItem, error) {
	// fmt.Println("CertProviderList GetItem")
	return o.M[o.IDs[index]], nil
}

func (o *certProviderListS) Length() int {
	// fmt.Println("CertProviderList Length")
	return len(o.IDs)
}

//---

func CertProviderList(where, order string, offset, limit int) certProviderList {

	response := &certProviderListS{
		query: req_listQueryS{
			Where:  where,
			Order:  order,
			Offset: offset,
			Limit:  limit,
		},
	}

	if where == "nil" {
		return response
	}

	response.Refresh()
	return response
}

func (o *certProviderListS) SetWhere(where string) out.Info {
	o.query = req_listQueryS{
		Where: where,
	}
	return o.Refresh()
}

func (o *certProviderListS) SetOrder(order string) out.Info {
	o.query = req_listQueryS{
		Order: order,
	}
	return o.Refresh()
}

func (o *certProviderListS) SetOffset(offset int) out.Info {
	o.query = req_listQueryS{
		Offset: offset,
	}
	return o.Refresh()
}

func (o *certProviderListS) SetLimit(limit int) out.Info {
	o.query = req_listQueryS{
		Limit: limit,
	}
	return o.Refresh()
}

func (o *certProviderListS) First() CertProvider {
	for _, obj := range o.M {
		return out.CatchError(obj, nil)
	}

	res := &certProviderS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}

func (o *certProviderListS) Iter() []CertProvider {

	if o.NotValid() {
		return nil
	}

	res := []CertProvider{}
	for _, id := range o.IDs {
		res = append(res, out.CatchError(o.M[id], nil))
	}
	return res
}

func (o *certProviderListS) Refresh() out.Info {

	if o.query.Where == "nil" {
		return o
	}

	response := &certProviderListS{
		query:        o.query,
		IDs:          []string{},
		IDtoIdx:      map[string]int{},
		M:            map[string]*certProviderS{},
		dataListener: o.dataListener,
	}

	client.call(
		"CertProviderList",
		o.query,
		response,
	)
	*o = *response

	for dl := range o.dataListener {
		// fmt.Println(">>>>>>>>>>>>>>>>>> dataListener", dl)
		dl.DataChanged()
	}
	return o
}

func (o *certProviderListS) GetByID(id string) CertProvider {
	return out.CatchError(o.M[id], nil)
}

//---

func (o *certProviderListS) GetByName(name string) CertProvider {

	for _, obj := range o.M {
		if obj.NameC == name {
			return out.CatchError(obj, nil)
		}
	}

	res := &certProviderS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}
