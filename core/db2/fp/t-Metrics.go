package fp

// This file is automatically generated, manual editing is not recommended.

import (
	"encoding/json"
	"fmt"
	"time"

	"fyne.io/fyne/v2/data/binding"
	"github.com/lukx33/lwhelper"
	"github.com/lukx33/lwhelper/out"
)

var tmpMetrics = lwhelper.ID()

type Metrics interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	ID() string
	Created() int64
	Updated() int64

	Enabled() bool
	SetEnabled(value bool) out.Info
	Grafana() bool
	SetGrafana(value bool) out.Info
	GrafanaAdminPassword() string
	SetGrafanaAdminPassword(value string) out.Info
	Name() string
	SetName(value string) out.Info
	Organization() Organization
	SetOrganization(value Organization) out.Info
	VictoriaMetricsClusterSize() int64
	SetVictoriaMetricsClusterSize(value int64) out.Info
	Delete() out.Info
}
type metricsS struct {
	out.DontUseMeInfoS

	IDC      string
	CreatedC int64
	UpdatedC int64

	EnabledC                    bool
	GrafanaC                    bool
	GrafanaAdminPasswordC       string
	NameC                       string
	OrganizationC               string
	VictoriaMetricsClusterSizeC int64
}

func (o *metricsS) dataMapEN() map[string]string {
	return map[string]string{
		"ID":                         o.IDC,
		"Created":                    fmt.Sprint(o.CreatedC),
		"Updated":                    fmt.Sprint(o.UpdatedC),
		"Enabled":                    fmt.Sprint(o.EnabledC),
		"Grafana":                    fmt.Sprint(o.GrafanaC),
		"GrafanaAdminPassword":       o.GrafanaAdminPasswordC,
		"Name":                       o.NameC,
		"Organization":               o.OrganizationC,
		"VictoriaMetricsClusterSize": fmt.Sprint(o.VictoriaMetricsClusterSizeC),
	}
}

// ---

func (o *metricsS) AddListener(l binding.DataListener) {
	fmt.Println("Metrics AddListener")
}

func (o *metricsS) RemoveListener(l binding.DataListener) {
	fmt.Println("Metrics RemoveListener")
}

// ---

func (o *metricsS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *metricsS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

// ---
// ID

func (o *metricsS) ID() string {
	if o == nil {
		return ""
	}
	return o.IDC
}

// ---
// Created

func (o *metricsS) Created() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedC
}

// ---
// Updated

func (o *metricsS) Updated() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedC
}

// ---
// Enabled

func (o *metricsS) Enabled() bool {
	return o.EnabledC
}

func (o *metricsS) SetEnabled(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsSetEnabled",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.EnabledC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Grafana

func (o *metricsS) Grafana() bool {
	return o.GrafanaC
}

func (o *metricsS) SetGrafana(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsSetGrafana",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.GrafanaC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// GrafanaAdminPassword

func (o *metricsS) GrafanaAdminPassword() string {
	return o.GrafanaAdminPasswordC
}

func (o *metricsS) SetGrafanaAdminPassword(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsSetGrafanaAdminPassword",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.GrafanaAdminPasswordC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Name

func (o *metricsS) Name() string {
	return o.NameC
}

func (o *metricsS) SetName(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsSetName",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.NameC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Organization

func (o *metricsS) Organization() Organization {
	return OrganizationGetByID(o.OrganizationC)
}

func (o *metricsS) SetOrganization(value Organization) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsSetOrganization",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.OrganizationC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// VictoriaMetricsClusterSize

func (o *metricsS) VictoriaMetricsClusterSize() int64 {
	return o.VictoriaMetricsClusterSizeC
}

func (o *metricsS) SetVictoriaMetricsClusterSize(value int64) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsSetVictoriaMetricsClusterSize",
		req_setInt64S{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.VictoriaMetricsClusterSizeC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---

func MetricsGetByID(ID string) Metrics {

	response := &metricsS{}
	client.call(
		"MetricsGetByID",
		req_oneS{
			ID: ID,
		},
		response,
	)

	return response
}

// ---

func (o *metricsS) Delete() out.Info {

	response := new(out.DontUseMeInfoS)
	client.call(
		"MetricsDelete",
		req_oneS{
			ID: o.ID(),
		},
		response,
	)

	return response
}

// ---

type req_MetricsCreateS struct {
	Name         string
	Organization string
}

func MetricsCreate(
	Name string,
	Organization Organization,

) Metrics {

	response := &metricsS{}
	client.call(
		"MetricsCreate",
		req_MetricsCreateS{
			Name:         Name,
			Organization: Organization.ID(),
		},
		response,
	)
	return response
}

// ----------------------------------------------------- table list:

type metricsList interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	Length() int
	First() Metrics
	GetByID(id string) Metrics
	Iter() []Metrics
	Refresh() out.Info
	SetWhere(where string) out.Info
	SetOrder(order string) out.Info
	SetOffset(offset int) out.Info
	SetLimit(limit int) out.Info

	AddListener(dl binding.DataListener)
	RemoveListener(dl binding.DataListener)
	GetItem(index int) (binding.DataItem, error)
}

type metricsListS struct {
	out.DontUseMeInfoS

	query   req_listQueryS
	IDs     []string
	IDtoIdx map[string]int
	M       map[string]*metricsS

	dataListener map[binding.DataListener]bool
}

func (o *metricsListS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *metricsListS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

func (o *metricsListS) AddListener(dl binding.DataListener) {
	// fmt.Println("MetricsList AddListener")
	if o.dataListener == nil {
		o.dataListener = map[binding.DataListener]bool{}
	}
	o.dataListener[dl] = true
}

func (o *metricsListS) RemoveListener(dl binding.DataListener) {
	// fmt.Println("MetricsList RemoveListener")
	delete(o.dataListener, dl)
}

func (o *metricsListS) GetItem(index int) (binding.DataItem, error) {
	// fmt.Println("MetricsList GetItem")
	return o.M[o.IDs[index]], nil
}

func (o *metricsListS) Length() int {
	// fmt.Println("MetricsList Length")
	return len(o.IDs)
}

//---

func MetricsList(where, order string, offset, limit int) metricsList {

	response := &metricsListS{
		query: req_listQueryS{
			Where:  where,
			Order:  order,
			Offset: offset,
			Limit:  limit,
		},
	}

	if where == "nil" {
		return response
	}

	response.Refresh()
	return response
}

func (o *metricsListS) SetWhere(where string) out.Info {
	o.query = req_listQueryS{
		Where: where,
	}
	return o.Refresh()
}

func (o *metricsListS) SetOrder(order string) out.Info {
	o.query = req_listQueryS{
		Order: order,
	}
	return o.Refresh()
}

func (o *metricsListS) SetOffset(offset int) out.Info {
	o.query = req_listQueryS{
		Offset: offset,
	}
	return o.Refresh()
}

func (o *metricsListS) SetLimit(limit int) out.Info {
	o.query = req_listQueryS{
		Limit: limit,
	}
	return o.Refresh()
}

func (o *metricsListS) First() Metrics {
	for _, obj := range o.M {
		return out.CatchError(obj, nil)
	}

	res := &metricsS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}

func (o *metricsListS) Iter() []Metrics {

	if o.NotValid() {
		return nil
	}

	res := []Metrics{}
	for _, id := range o.IDs {
		res = append(res, out.CatchError(o.M[id], nil))
	}
	return res
}

func (o *metricsListS) Refresh() out.Info {

	if o.query.Where == "nil" {
		return o
	}

	response := &metricsListS{
		query:        o.query,
		IDs:          []string{},
		IDtoIdx:      map[string]int{},
		M:            map[string]*metricsS{},
		dataListener: o.dataListener,
	}

	client.call(
		"MetricsList",
		o.query,
		response,
	)
	*o = *response

	for dl := range o.dataListener {
		// fmt.Println(">>>>>>>>>>>>>>>>>> dataListener", dl)
		dl.DataChanged()
	}
	return o
}

func (o *metricsListS) GetByID(id string) Metrics {
	return out.CatchError(o.M[id], nil)
}

//---

func (o *metricsListS) GetByName(name string) Metrics {

	for _, obj := range o.M {
		if obj.NameC == name {
			return out.CatchError(obj, nil)
		}
	}

	res := &metricsS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}
