package fp

// This file is automatically generated, manual editing is not recommended.

import (
	"encoding/json"
	"fmt"
	"time"

	"fyne.io/fyne/v2/data/binding"
	"github.com/lukx33/lwhelper"
	"github.com/lukx33/lwhelper/out"
)

var tmpInstallation = lwhelper.ID()

type Installation interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	ID() string
	Created() int64
	Updated() int64

	Active() bool
	SetActive(value bool) out.Info
	CreatedBy() User
	SetCreatedBy(value User) out.Info
	DatabaseSizeGB() int64
	SetDatabaseSizeGB(value int64) out.Info
	ForceResourceLimits() bool
	SetForceResourceLimits(value bool) out.Info
	GitProvider() GitProvider
	SetGitProvider(value GitProvider) out.Info
	GitServerLocalHide() bool
	SetGitServerLocalHide(value bool) out.Info
	ImageBuilder() ImageBuilder
	SetImageBuilder(value ImageBuilder) out.Info
	Ingress() Ingress
	SetIngress(value Ingress) out.Info
	Kube() Kube
	SetKube(value Kube) out.Info
	LastIP() string
	SetLastIP(value string) out.Info
	LastSync() int64
	SetLastSync(value int64) out.Info
	Longhorn() bool
	SetLonghorn(value bool) out.Info
	Metrics() Metrics
	SetMetrics(value Metrics) out.Info
	Name() string
	SetName(value string) out.Info
	Online() bool
	SetOnline(value bool) out.Info
	Organization() Organization
	SetOrganization(value Organization) out.Info
	ReleaseGitTag() string
	SetReleaseGitTag(value string) out.Info
	State() InstallationStatusT
	SetState(value InstallationStatusT) out.Info
	StateLastChange() int64
	SetStateLastChange(value int64) out.Info
	VirtualIP() string
	SetVirtualIP(value string) out.Info
	VirtualInterface() string
	SetVirtualInterface(value string) out.Info
	WebUIDomain() Domain
	SetWebUIDomain(value Domain) out.Info
	Delete() out.Info
}
type installationS struct {
	out.DontUseMeInfoS

	IDC      string
	CreatedC int64
	UpdatedC int64

	ActiveC              bool
	CreatedByC           string
	DatabaseSizeGBC      int64
	ForceResourceLimitsC bool
	GitProviderC         string
	GitServerLocalHideC  bool
	ImageBuilderC        string
	IngressC             string
	KubeC                string
	LastIPC              string
	LastSyncC            int64
	LonghornC            bool
	MetricsC             string
	NameC                string
	OnlineC              bool
	OrganizationC        string
	ReleaseGitTagC       string
	StateC               InstallationStatusT
	StateLastChangeC     int64
	VirtualIPC           string
	VirtualInterfaceC    string
	WebUIDomainC         string
}

func (o *installationS) dataMapEN() map[string]string {
	return map[string]string{
		"ID":                  o.IDC,
		"Created":             fmt.Sprint(o.CreatedC),
		"Updated":             fmt.Sprint(o.UpdatedC),
		"Active":              fmt.Sprint(o.ActiveC),
		"CreatedBy":           o.CreatedByC,
		"DatabaseSizeGB":      fmt.Sprint(o.DatabaseSizeGBC),
		"ForceResourceLimits": fmt.Sprint(o.ForceResourceLimitsC),
		"GitProvider":         o.GitProviderC,
		"GitServerLocalHide":  fmt.Sprint(o.GitServerLocalHideC),
		"ImageBuilder":        o.ImageBuilderC,
		"Ingress":             o.IngressC,
		"Kube":                o.KubeC,
		"LastIP":              o.LastIPC,
		"LastSync":            fmt.Sprint(o.LastSyncC),
		"Longhorn":            fmt.Sprint(o.LonghornC),
		"Metrics":             o.MetricsC,
		"Name":                o.NameC,
		"Online":              fmt.Sprint(o.OnlineC),
		"Organization":        o.OrganizationC,
		"ReleaseGitTag":       o.ReleaseGitTagC,
		"State":               o.StateC.EN(),
		"StateLastChange":     fmt.Sprint(o.StateLastChangeC),
		"VirtualIP":           o.VirtualIPC,
		"VirtualInterface":    o.VirtualInterfaceC,
		"WebUIDomain":         o.WebUIDomainC,
	}
}

// ---

func (o *installationS) AddListener(l binding.DataListener) {
	fmt.Println("Installation AddListener")
}

func (o *installationS) RemoveListener(l binding.DataListener) {
	fmt.Println("Installation RemoveListener")
}

// ---

func (o *installationS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *installationS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

// ---
// ID

func (o *installationS) ID() string {
	if o == nil {
		return ""
	}
	return o.IDC
}

// ---
// Created

func (o *installationS) Created() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedC
}

// ---
// Updated

func (o *installationS) Updated() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedC
}

// ---
// Active

func (o *installationS) Active() bool {
	return o.ActiveC
}

func (o *installationS) SetActive(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetActive",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.ActiveC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// CreatedBy

func (o *installationS) CreatedBy() User {
	return UserGetByID(o.CreatedByC)
}

func (o *installationS) SetCreatedBy(value User) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetCreatedBy",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.CreatedByC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// DatabaseSizeGB

func (o *installationS) DatabaseSizeGB() int64 {
	return o.DatabaseSizeGBC
}

func (o *installationS) SetDatabaseSizeGB(value int64) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetDatabaseSizeGB",
		req_setInt64S{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.DatabaseSizeGBC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// ForceResourceLimits

func (o *installationS) ForceResourceLimits() bool {
	return o.ForceResourceLimitsC
}

func (o *installationS) SetForceResourceLimits(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetForceResourceLimits",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.ForceResourceLimitsC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// GitProvider

func (o *installationS) GitProvider() GitProvider {
	return GitProviderGetByID(o.GitProviderC)
}

func (o *installationS) SetGitProvider(value GitProvider) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetGitProvider",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.GitProviderC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// GitServerLocalHide

func (o *installationS) GitServerLocalHide() bool {
	return o.GitServerLocalHideC
}

func (o *installationS) SetGitServerLocalHide(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetGitServerLocalHide",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.GitServerLocalHideC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// ImageBuilder

func (o *installationS) ImageBuilder() ImageBuilder {
	return ImageBuilderGetByID(o.ImageBuilderC)
}

func (o *installationS) SetImageBuilder(value ImageBuilder) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetImageBuilder",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.ImageBuilderC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Ingress

func (o *installationS) Ingress() Ingress {
	return IngressGetByID(o.IngressC)
}

func (o *installationS) SetIngress(value Ingress) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetIngress",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.IngressC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Kube

func (o *installationS) Kube() Kube {
	return KubeGetByID(o.KubeC)
}

func (o *installationS) SetKube(value Kube) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetKube",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.KubeC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// LastIP

func (o *installationS) LastIP() string {
	return o.LastIPC
}

func (o *installationS) SetLastIP(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetLastIP",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LastIPC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// LastSync

func (o *installationS) LastSync() int64 {
	return o.LastSyncC
}

func (o *installationS) SetLastSync(value int64) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetLastSync",
		req_setInt64S{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LastSyncC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Longhorn

func (o *installationS) Longhorn() bool {
	return o.LonghornC
}

func (o *installationS) SetLonghorn(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetLonghorn",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.LonghornC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Metrics

func (o *installationS) Metrics() Metrics {
	return MetricsGetByID(o.MetricsC)
}

func (o *installationS) SetMetrics(value Metrics) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetMetrics",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.MetricsC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Name

func (o *installationS) Name() string {
	return o.NameC
}

func (o *installationS) SetName(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetName",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.NameC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Online

func (o *installationS) Online() bool {
	return o.OnlineC
}

func (o *installationS) SetOnline(value bool) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetOnline",
		req_setBoolS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.OnlineC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// Organization

func (o *installationS) Organization() Organization {
	return OrganizationGetByID(o.OrganizationC)
}

func (o *installationS) SetOrganization(value Organization) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetOrganization",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.OrganizationC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// ReleaseGitTag

func (o *installationS) ReleaseGitTag() string {
	return o.ReleaseGitTagC
}

func (o *installationS) SetReleaseGitTag(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetReleaseGitTag",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.ReleaseGitTagC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// State

func (o *installationS) State() InstallationStatusT {
	return o.StateC
}

func (o *installationS) SetState(value InstallationStatusT) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetState",
		req_setUInt16S{
			ID:       o.IDC,
			NewValue: uint16(value),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.StateC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// StateLastChange

func (o *installationS) StateLastChange() int64 {
	return o.StateLastChangeC
}

func (o *installationS) SetStateLastChange(value int64) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetStateLastChange",
		req_setInt64S{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.StateLastChangeC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// VirtualIP

func (o *installationS) VirtualIP() string {
	return o.VirtualIPC
}

func (o *installationS) SetVirtualIP(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetVirtualIP",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.VirtualIPC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// VirtualInterface

func (o *installationS) VirtualInterface() string {
	return o.VirtualInterfaceC
}

func (o *installationS) SetVirtualInterface(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetVirtualInterface",
		req_setStringS{
			ID:       o.IDC,
			NewValue: value,
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.VirtualInterfaceC = value
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// WebUIDomain

func (o *installationS) WebUIDomain() Domain {
	return DomainGetByID(o.WebUIDomainC)
}

func (o *installationS) SetWebUIDomain(value Domain) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationSetWebUIDomain",
		req_setRelationS{
			ID:     o.IDC,
			NewKey: value.ID(),
		},
		response,
	)
	if response.NotValid() {
		return response
	}

	o.WebUIDomainC = value.ID()
	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---

func InstallationGetByID(ID string) Installation {

	response := &installationS{}
	client.call(
		"InstallationGetByID",
		req_oneS{
			ID: ID,
		},
		response,
	)

	return response
}

// ---

func InstallationGetByKube(Kube string) Installation {

	response := &installationS{}
	client.call(
		"InstallationGetByKube",
		req_oneS{
			ID: Kube,
		},
		response,
	)

	return response
}

// ---

func InstallationGetByWebUIDomain(WebUIDomain string) Installation {

	response := &installationS{}
	client.call(
		"InstallationGetByWebUIDomain",
		req_oneS{
			ID: WebUIDomain,
		},
		response,
	)

	return response
}

// ---

func (o *installationS) Delete() out.Info {

	response := new(out.DontUseMeInfoS)
	client.call(
		"InstallationDelete",
		req_oneS{
			ID: o.ID(),
		},
		response,
	)

	return response
}

// ---

type req_InstallationCreateS struct {
	CreatedBy     string
	GitProvider   string
	ImageBuilder  string
	Ingress       string
	Kube          string
	Metrics       string
	Name          string
	Organization  string
	ReleaseGitTag string
	WebUIDomain   string
}

func InstallationCreate(
	CreatedBy User,
	GitProvider GitProvider,
	ImageBuilder ImageBuilder,
	Ingress Ingress,
	Kube Kube,
	Metrics Metrics,
	Name string,
	Organization Organization,
	ReleaseGitTag string,
	WebUIDomain Domain,

) Installation {

	response := &installationS{}
	client.call(
		"InstallationCreate",
		req_InstallationCreateS{
			CreatedBy:     CreatedBy.ID(),
			GitProvider:   GitProvider.ID(),
			ImageBuilder:  ImageBuilder.ID(),
			Ingress:       Ingress.ID(),
			Kube:          Kube.ID(),
			Metrics:       Metrics.ID(),
			Name:          Name,
			Organization:  Organization.ID(),
			ReleaseGitTag: ReleaseGitTag,
			WebUIDomain:   WebUIDomain.ID(),
		},
		response,
	)
	return response
}

// ----------------------------------------------------- table list:

type installationList interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	Length() int
	First() Installation
	GetByID(id string) Installation
	Iter() []Installation
	Refresh() out.Info
	SetWhere(where string) out.Info
	SetOrder(order string) out.Info
	SetOffset(offset int) out.Info
	SetLimit(limit int) out.Info

	AddListener(dl binding.DataListener)
	RemoveListener(dl binding.DataListener)
	GetItem(index int) (binding.DataItem, error)
}

type installationListS struct {
	out.DontUseMeInfoS

	query   req_listQueryS
	IDs     []string
	IDtoIdx map[string]int
	M       map[string]*installationS

	dataListener map[binding.DataListener]bool
}

func (o *installationListS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *installationListS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

func (o *installationListS) AddListener(dl binding.DataListener) {
	// fmt.Println("InstallationList AddListener")
	if o.dataListener == nil {
		o.dataListener = map[binding.DataListener]bool{}
	}
	o.dataListener[dl] = true
}

func (o *installationListS) RemoveListener(dl binding.DataListener) {
	// fmt.Println("InstallationList RemoveListener")
	delete(o.dataListener, dl)
}

func (o *installationListS) GetItem(index int) (binding.DataItem, error) {
	// fmt.Println("InstallationList GetItem")
	return o.M[o.IDs[index]], nil
}

func (o *installationListS) Length() int {
	// fmt.Println("InstallationList Length")
	return len(o.IDs)
}

//---

func InstallationList(where, order string, offset, limit int) installationList {

	response := &installationListS{
		query: req_listQueryS{
			Where:  where,
			Order:  order,
			Offset: offset,
			Limit:  limit,
		},
	}

	if where == "nil" {
		return response
	}

	response.Refresh()
	return response
}

func (o *installationListS) SetWhere(where string) out.Info {
	o.query = req_listQueryS{
		Where: where,
	}
	return o.Refresh()
}

func (o *installationListS) SetOrder(order string) out.Info {
	o.query = req_listQueryS{
		Order: order,
	}
	return o.Refresh()
}

func (o *installationListS) SetOffset(offset int) out.Info {
	o.query = req_listQueryS{
		Offset: offset,
	}
	return o.Refresh()
}

func (o *installationListS) SetLimit(limit int) out.Info {
	o.query = req_listQueryS{
		Limit: limit,
	}
	return o.Refresh()
}

func (o *installationListS) First() Installation {
	for _, obj := range o.M {
		return out.CatchError(obj, nil)
	}

	res := &installationS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}

func (o *installationListS) Iter() []Installation {

	if o.NotValid() {
		return nil
	}

	res := []Installation{}
	for _, id := range o.IDs {
		res = append(res, out.CatchError(o.M[id], nil))
	}
	return res
}

func (o *installationListS) Refresh() out.Info {

	if o.query.Where == "nil" {
		return o
	}

	response := &installationListS{
		query:        o.query,
		IDs:          []string{},
		IDtoIdx:      map[string]int{},
		M:            map[string]*installationS{},
		dataListener: o.dataListener,
	}

	client.call(
		"InstallationList",
		o.query,
		response,
	)
	*o = *response

	for dl := range o.dataListener {
		// fmt.Println(">>>>>>>>>>>>>>>>>> dataListener", dl)
		dl.DataChanged()
	}
	return o
}

func (o *installationListS) GetByID(id string) Installation {
	return out.CatchError(o.M[id], nil)
}

//---

func (o *installationListS) GetByName(name string) Installation {

	for _, obj := range o.M {
		if obj.NameC == name {
			return out.CatchError(obj, nil)
		}
	}

	res := &installationS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}
