package db2

// This file is automatically generated, manual editing is not recommended.

import (
	"encoding/json"
	"fmt"
	"time"

	"fyne.io/fyne/v2/data/binding"
	"github.com/lukx33/lwhelper"
	"github.com/lukx33/lwhelper/out"
	"gorm.io/gorm"
)

var tmpEvent = lwhelper.ID()

type Event interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	ID() string
	Created() int64
	Updated() int64

	Message() string
	SetMessage(value string) out.Info
	ModuleName() string
	SetModuleName(value string) out.Info
	State() StateT
	SetState(value StateT) out.Info
	TookSec() int64
	SetTookSec(value int64) out.Info
	Delete() out.Info
}
type eventS struct {
	out.DontUseMeInfoS `gorm:"-"`

	IDC      string `gorm:"column:ID;primaryKey"`
	CreatedC int64  `gorm:"column:Created;autoCreateTime"`
	UpdatedC int64  `gorm:"column:Updated;autoUpdateTime"`

	MessageC    string `gorm:"column:Message"`
	ModuleNameC string `gorm:"column:ModuleName"`
	StateC      StateT `gorm:"column:State"`
	TookSecC    int64  `gorm:"column:TookSec"`
}

func (eventS) TableName() string {
	return "Event"
}

// ---

func (o *eventS) AfterFind(tx *gorm.DB) error {
	return nil
}

// ---

func (o *eventS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *eventS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

func (o *eventS) AddListener(l binding.DataListener) {
	fmt.Println("Event AddListener")
}

func (o *eventS) RemoveListener(l binding.DataListener) {
	fmt.Println("Event RemoveListener")
}

func (o *eventS) Delete() out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	dbLock.Lock()
	defer dbLock.Unlock()

	err := dbConnection.Where("ID = ?", o.IDC).Delete(&eventS{}).Error
	if err != nil {
		return out.New(err)
	}

	return out.NewSuccess()
}

func eventCreateOrUpdate(srcB []byte) {

	src := &eventS{}
	json.Unmarshal(srcB, src)
	id := src.IDC
	// src.InfoPrint()

	if id == "" {
		panic("cos tu jest nie tak")
	}

	srcMap := map[string]any{}
	json.Unmarshal(src.InfoJSON(), &srcMap)
	delete(srcMap, "trace")
	delete(srcMap, "result")
	delete(srcMap, "vars")
	delete(srcMap, "IDC")
	// out.PrintJSON(srcMap)

	dbLock.Lock()
	defer dbLock.Unlock()

	var exists bool
	if out.New(dbConnection.Model(&eventS{}).Select("count(*) > 0").
		Where("id = ?", id).Find(&exists).Error).NotValid() {
		return
	}
	if !exists {
		// new item, creating
		// fmt.Println("new item")
		out.New(dbConnection.Create(src).Error)
		return
	}

	// looking for changes
	// fmt.Println("changes")
	out.New(dbConnection.Model(&eventS{}).Where("ID = ?", id).Updates(srcMap).Error)
}

// ---
// ID

func (o *eventS) ID() string {
	if o == nil {
		return ""
	}
	return o.IDC
}

// ---
// Created

func (o *eventS) Created() int64 {
	if o == nil {
		return 0
	}
	return o.CreatedC
}

// ---
// Updated

func (o *eventS) Updated() int64 {
	if o == nil {
		return 0
	}
	return o.UpdatedC
}

// ---
// Message

func (o *eventS) Message() string {
	if o == nil {
		return ""
	}
	return o.MessageC
}

func (o *eventS) SetMessage(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	// TODO: if current value == new value, then there is no point in changing anything

	oldValue := o.MessageC
	o.MessageC = value

	dbLock.Lock()
	defer dbLock.Unlock()

	err := dbConnection.Model(&eventS{}).Where("ID = ?", o.IDC).Update("Message", value).Error
	if err != nil {
		o.MessageC = oldValue
		return out.New(err)
	}

	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// ModuleName

func (o *eventS) ModuleName() string {
	if o == nil {
		return ""
	}
	return o.ModuleNameC
}

func (o *eventS) SetModuleName(value string) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	// TODO: if current value == new value, then there is no point in changing anything

	oldValue := o.ModuleNameC
	o.ModuleNameC = value

	dbLock.Lock()
	defer dbLock.Unlock()

	err := dbConnection.Model(&eventS{}).Where("ID = ?", o.IDC).Update("ModuleName", value).Error
	if err != nil {
		o.ModuleNameC = oldValue
		return out.New(err)
	}

	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// State

func (o *eventS) State() StateT {
	if o == nil {
		return 0
	}
	return o.StateC
}

func (o *eventS) SetState(value StateT) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	// TODO: if current value == new value, then there is no point in changing anything

	oldValue := o.StateC
	o.StateC = value

	dbLock.Lock()
	defer dbLock.Unlock()

	err := dbConnection.Model(&eventS{}).Where("ID = ?", o.IDC).Update("State", value).Error
	if err != nil {
		o.StateC = oldValue
		return out.New(err)
	}

	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ---
// TookSec

func (o *eventS) TookSec() int64 {
	if o == nil {
		return 0
	}
	return o.TookSecC
}

func (o *eventS) SetTookSec(value int64) out.Info {

	if o == nil {
		return out.NewErrorMsg("object is nil")
	}
	if o.NotValid() {
		return out.NewErrorMsg("object is not valid")
	}

	// TODO: validation

	// TODO: if current value == new value, then there is no point in changing anything

	oldValue := o.TookSecC
	o.TookSecC = value

	dbLock.Lock()
	defer dbLock.Unlock()

	err := dbConnection.Model(&eventS{}).Where("ID = ?", o.IDC).Update("TookSec", value).Error
	if err != nil {
		o.TookSecC = oldValue
		return out.New(err)
	}

	o.UpdatedC = time.Now().Unix()
	return out.NewSuccess()
}

// ----------------------------------------------------- table list:

type eventList interface {
	NotValid() bool
	InfoAddTrace(result out.ResultT, msg string, skipFrames int)
	InfoAddCause(parent out.Info) out.Info
	InfoAddVar(name string, value any) out.Info
	InfoResult() out.ResultT
	InfoTraces() []out.TraceS
	InfoLastTrace() out.TraceS
	InfoJSON() []byte
	InfoPrint()

	Length() int
	First() Event
	GetByID(id string) Event
	Iter() []Event
	Refresh() out.Info
	SetWhere(where string) out.Info
	SetOrder(order string) out.Info
	SetOffset(offset int) out.Info
	SetLimit(limit int) out.Info

	AddListener(dl binding.DataListener)
	RemoveListener(dl binding.DataListener)
	GetItem(index int) (binding.DataItem, error)
}

type eventListS struct {
	out.DontUseMeInfoS

	query        req_listQueryS
	M            map[string]*eventS
	IDs          []string
	IDtoIdx      map[string]int
	dataListener map[binding.DataListener]bool
}

//---

func (o *eventListS) InfoJSON() []byte {
	buf, _ := json.MarshalIndent(o, "", "  ")
	return buf
}

func (o *eventListS) InfoPrint() {
	fmt.Println(string(o.InfoJSON()))
}

func (o *eventListS) AddListener(dl binding.DataListener) {
	// fmt.Println("EventList AddListener")
	if o.dataListener == nil {
		o.dataListener = map[binding.DataListener]bool{}
	}
	o.dataListener[dl] = true
}

func (o *eventListS) RemoveListener(dl binding.DataListener) {
	// fmt.Println("EventList RemoveListener")
	delete(o.dataListener, dl)
}

func (o *eventListS) GetItem(index int) (binding.DataItem, error) {
	// fmt.Println("EventList GetItem")
	return o.M[o.IDs[index]], nil
}

func (o *eventListS) Length() int {
	// fmt.Println("EventList Length")
	return len(o.IDs)
}

func (o *eventListS) SetWhere(where string) out.Info {
	o.query = req_listQueryS{
		Where: where,
	}
	return o.Refresh()
}

func (o *eventListS) SetOrder(order string) out.Info {
	o.query = req_listQueryS{
		Order: order,
	}
	return o.Refresh()
}

func (o *eventListS) SetOffset(offset int) out.Info {
	o.query = req_listQueryS{
		Offset: offset,
	}
	return o.Refresh()
}

func (o *eventListS) SetLimit(limit int) out.Info {
	o.query = req_listQueryS{
		Limit: limit,
	}
	return o.Refresh()
}

//---

func EventList(where, order string, offset, limit int) eventList {

	response := &eventListS{
		query: req_listQueryS{
			Where:  where,
			Order:  order,
			Offset: offset,
			Limit:  limit,
		},
	}

	if where == "nil" {
		return response
	}

	response.Refresh()
	return response
}

func (o *eventListS) Refresh() out.Info {

	if o.query.Where == "nil" {
		return o
	}

	res := &eventListS{
		query:        o.query,
		IDs:          []string{},
		IDtoIdx:      map[string]int{},
		M:            map[string]*eventS{},
		dataListener: o.dataListener,
	}

	dbLock.Lock()
	defer dbLock.Unlock()

	st := dbConnection.Model(&eventS{})
	if o.query.Where != "" {
		st.Where(o.query.Where)
	}
	if o.query.Order == "" {
		o.query.Order = "Created"
	}
	if o.query.Limit == 0 {
		o.query.Limit = 30
	}

	responseList := []*eventS{}
	if out.CatchError(res,
		st.Order(o.query.Order).Offset(o.query.Offset).Limit(o.query.Limit).Find(&responseList).Error,
	).NotValid() {
		return res
	}
	// out.PrintJSON(responseList)

	for idx, entry := range responseList {
		res.IDs = append(res.IDs, entry.IDC)
		res.IDtoIdx[entry.IDC] = idx
		res.M[entry.IDC] = entry
	}

	out.CatchError(res, nil)
	*o = *res

	for dl := range o.dataListener {
		// fmt.Println(">>>>>>>>>>>>>>>>>> dataListener", dl)
		dl.DataChanged()
	}
	return res
}

func (o *eventListS) First() Event {
	for _, obj := range o.M {
		return out.CatchError(obj, nil)
	}

	res := &eventS{}
	res.InfoAddTrace(out.NotFound, "", 0)
	return res
}

func (o *eventListS) GetByID(id string) Event {
	res, exist := o.M[id]
	if !exist {
		res.InfoAddTrace(out.NotFound, "", 0)
		return res
	}
	return out.CatchError(res, nil)
}

func (o *eventListS) Iter() []Event {

	if o.NotValid() {
		return nil
	}

	res := []Event{}
	for _, id := range o.IDs {
		res = append(res, out.CatchError(o.M[id], nil))
	}
	return res
}

// ---

func EventGetByID(key string) Event {

	res := &eventS{}
	if key == "" {
		res.InfoAddTrace(out.NotFound, "", 0)
		return res
	}

	dbLock.Lock()
	defer dbLock.Unlock()

	out.CatchError(res, dbConnection.Where("ID = ?", key).First(res).Error)

	if res.NotValid() && res.InfoLastTrace().Message == "record not found" {
		res.Result = out.NotFound
	}

	return res
}

//---

func EventCreate(
	Message string,
	ModuleName string,
) Event {

	// TODO: Input data validation

	now := time.Now()
	obj := &eventS{
		IDC:         lwhelper.ID(),
		CreatedC:    now.Unix(),
		UpdatedC:    now.Unix(),
		MessageC:    Message,
		ModuleNameC: ModuleName,
	}

	obj.StateC = 2
	obj.TookSecC = 0

	// Saving data to the database
	dbLock.Lock()
	defer dbLock.Unlock()

	return out.CatchError(obj, dbConnection.Create(obj).Error)
}

//---
